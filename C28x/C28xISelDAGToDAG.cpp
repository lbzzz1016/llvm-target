//===-- C28xISelDAGToDAG.cpp - A dag to dag inst selector for C28x ----===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the C28x target.
//
//===----------------------------------------------------------------------===//

#include "C28x.h"
#include "C28xSubtarget.h"
#include "C28xTargetMachine.h"
#include "llvm/CodeGen/SelectionDAG.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Pass.h"

using namespace llvm;
#define DEBUG_TYPE "c28x-isel"
#define PASS_NAME "C28x DAG->DAG ISel"

namespace {

class C28xDAGToDAGISel : public SelectionDAGISel {
  public:
    C28xDAGToDAGISel() = delete;
    C28xDAGToDAGISel(C28xTargetMachine &TM, CodeGenOptLevel Level)
        : SelectionDAGISel(TM, Level) {}

  private:
    // Include the pieces autogenerated from the target description.
    #include "C28xGenDAGISel.inc"

    void Select(SDNode *Node) override;
};

class C28xDAGToDAGISelLegacy : public SelectionDAGISelLegacy {
  public:
    static char ID;
    C28xDAGToDAGISelLegacy(C28xTargetMachine &TM, CodeGenOptLevel Level)
      : SelectionDAGISelLegacy(
          ID, std::make_unique<C28xDAGToDAGISel>(TM, Level)) {}
};

} // end anonymous namespace

char C28xDAGToDAGISelLegacy::ID;
INITIALIZE_PASS(C28xDAGToDAGISelLegacy, DEBUG_TYPE, PASS_NAME, false, false)

// Register a legacy DAG->DAG ISel pass
FunctionPass *llvm::createC28xDAGToDAGISel(C28xTargetMachine &TM,
                                           CodeGenOptLevel Level) {
  return new C28xDAGToDAGISelLegacy(TM, Level);
}

/// Method implementation
void C28xDAGToDAGISel::Select(SDNode *Node) {
  // Select the default instruction
  SelectCode(Node);
}